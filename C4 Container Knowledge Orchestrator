@startuml
' ==========================================================================================
' Project: AI Avatar Experts System
' Diagram: C4 Component — Knowledge Orchestrator
' Author: System Architect
' Version: 1.0
' Date: 2025-10-16
'
' Purpose:
'   Отражает архитектуру подсистемы Knowledge Orchestrator, отвечающей за сбор,
'   нормализацию и индексацию корпоративных знаний, а также построение векторных
'   представлений для последующего поиска (RAG) и ответов AI-аватаров.
'
' Context:
'   • Внутренний корпоративный контур (без внешнего интернета)
'   • Защита ПДн по 152-ФЗ, локализация всех данных в РФ
'   • Высокая доступность ≥99.95%, кластеризация, retry, очередь задач
'
' ==========================================================================================

!includeurl https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml
LAYOUT_LEFT_RIGHT()

Container_Boundary(ko, "Knowledge Orchestrator — Java / Spring Boot") {

  ' --- Компоненты интеграции
  Component(confluence_connector, "Confluence Connector", "Java + REST", "Извлечение статей, ADR, инструкций из Confluence / Wiki.")
  Component(jira_connector, "Jira Connector", "Java + REST", "Сбор данных о задачах, комментариях, решениях.")
  Component(git_connector, "Git Connector", "Java + Git API", "Импорт документации, README, кода из GitLab / GitHub / Gitflame.")
  Component(crm_connector, "CRM/BPM Integrator", "Java + REST", "Интеграция с внутренними бизнес-системами для предметных знаний.")

  ' --- Обработка и нормализация
  Component(normalizer, "Data Normalization & Cleaning", "Java + NLP/Regex", "Очистка HTML/Markdown, удаление ПДн, нормализация структуры документов.")
  Component(pii_filter, "PII Filter / Sanitizer", "Java", "Обнаружение и маскирование персональных данных (email, ФИО, телефоны).")
  Component(enricher, "Metadata Enricher", "Java", "Добавление метаданных: автор, система, тип документа, дата изменения.")
  Component(classifier, "Content Classifier", "Java + ML", "Классификация документов по темам, системам, ролям, типам контента.")

  ' --- Построение индексов и векторных представлений
  Component(embedding_service, "Embedding Builder", "Java + Python worker", "Генерация векторных представлений (embeddings) через встроенный ML или локальный LLM API.")
  Component(indexer, "Indexing Service", "Java", "Создание индексов в OpenSearch и загрузка embeddings в Vector DB.")
  Component(schema_registry, "Schema Registry", "Java", "Хранение схем метаданных и форматов документов для ETL-процессов.")

  ' --- Управление процессами и надежность
  Component(pipeline_manager, "Pipeline Orchestrator", "Spring Batch / Kafka Streams", "Оркестрация ETL-процессов: импорт, очистка, обогащение, индексация.")
  Component(queue_manager, "Queue Manager", "Kafka / RabbitMQ", "Очереди задач и событий для асинхронной обработки и повторов (retry).")
  Component(health, "Health & Monitoring", "Spring Boot Actuator", "Health-checks, SLA, retries, circuit breaker.")
  Component(audit, "Audit & Logging", "Java", "Аудит ETL-процессов, логирование ошибок и успешных операций.")

  ' --- Хранилища и интеграции
  ComponentDb(pg, "PostgreSQL (RU DC)", "Cluster", "Хранение метаданных документов, журналов, статусов pipeline.")
  ComponentDb(os, "OpenSearch", "Search", "Полнотекстовый индекс нормализованных документов.")
  ComponentDb(pango, "Pangoline Vector DB", "Vectors", "Хранилище векторных embeddings для RAG.")
  ComponentQueue(broker, "Kafka / RabbitMQ", "Async", "Передача задач на обработку, ретраи, интеграция с Backend.")
  Component_Ext(mon, "Monitoring Stack", "Prometheus / Grafana / Loki", "Метрики, логи, трассировки.")
  Component_Ext(backend, "Backend Core Services", "Java / REST", "Запрашивает контекст знаний, обновления и метаданные.")
}

' --- Взаимосвязи
Rel(confluence_connector, pipeline_manager, "Отправляет данные для обработки", "Async / JSON")
Rel(jira_connector, pipeline_manager, "Передает тикеты и комментарии", "Async / JSON")
Rel(git_connector, pipeline_manager, "Передает репозитории/документы", "Async / JSON")
Rel(crm_connector, pipeline_manager, "Передает предметные данные", "Async / JSON")

Rel(pipeline_manager, normalizer, "Очистка и нормализация данных", "Internal API")
Rel(normalizer, pii_filter, "Удаление/маскирование ПДн", "Internal API")
Rel(pii_filter, enricher, "Передает очищенные данные", "Internal API")
Rel(enricher, classifier, "Классификация контента", "Internal API")

Rel(classifier, embedding_service, "Генерация embeddings", "Async / gRPC / REST")
Rel(embedding_service, indexer, "Передача embeddings для индексации", "Async / REST")
Rel(indexer, os, "Запись текстовых индексов", "REST / JSON")
Rel(indexer, pango, "Upsert векторных представлений", "HTTP / gRPC")

Rel(pipeline_manager, queue_manager, "Оркестрация и ретраи", "AMQP / Kafka")
Rel(pipeline_manager, pg, "Хранение статусов pipeline", "JDBC / SQL")
Rel(audit, pg, "Хранение логов и аудита", "JDBC / SQL")

Rel(health, mon, "Метрики SLA и статусы", "OTLP / HTTPS")
Rel(audit, mon, "Ошибки и ETL логи", "OTLP / HTTPS")
Rel(backend, indexer, "Запрашивает обновление индексов", "REST / HTTPS")
Rel(backend, embedding_service, "Запрашивает embeddings по контенту", "REST / HTTPS")

' --- Комментарии
' 1) Все данные локализованы в РФ (PostgreSQL, OpenSearch, Pangoline).
' 2) ПДн проходят фильтрацию (PII Filter) до индексации.
' 3) Асинхронная обработка через Kafka / RabbitMQ, повторные попытки и fault-tolerance.
' 4) SLA ≥99.95% обеспечивается за счет кластеризации и распределения ETL-пайплайнов.
' 5) Логирование и мониторинг централизованы (Prometheus / Grafana / Loki).

SHOW_LEGEND()
@enduml
